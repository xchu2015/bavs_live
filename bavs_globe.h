/*****************************************************************************
 * globe.h : cavs decoder library
 *****************************************************************************
*/
 
#ifndef _CAVS_GLOBE_H
#define _CAVS_GLOBE_H

#include <memory.h>
//#include <math.h>
#include <stdlib.h>
#include <limits.h>

#include "bavs_clearbit.h"
#include "bavs.h"
#include "bavs_cavlc.h"
#include "bavs_cabac.h"
//#include "../common/x86/cavsdsp.h"
#include "bavs_cpu.h"
//#include "threadpool.h"
#include "bavs_frame.h"
#include "threadpool.h"

#define B_MB_WEIGHTING 1 /* mb weighting prediction */
#define TEST_POOL 1 /* 0 threadpool shut down 1 threadpool open */

#ifndef HAVE_MMX
#define HAVE_MMX 1
#endif

#define THREADS_OPT 1 /* 0 for shut, open for entropy decoded parallel  */
#define CREATE_THREADS 1  /* 0 for shut, open for entropy decoded parallel */
#define FAR_ACCELERATE 1 /**/

#define DEBUG 0
#define DEBUG_INTRA 0
#define DEBUG_P_INTER 0
#define DEBUG_B_INTER 0

#define B4_SIZE	    4
extern uint8_t crop_table[];
static const xavs_vector MV_NOT_AVAIL    = {0,0,1,NOT_AVAIL};
static const xavs_vector MV_REF_DIR   = {0,0,1,REF_DIR};
static const xavs_vector MV_INTRA = {0,0,1,REF_INTRA};
#define EOB 0,0,0

typedef int (*cavs_bitstream_get_t) (cavs_decoder *p);
typedef int (*cavs_bitstream_get_coeffs_t) (cavs_decoder *p, const xavs_vlc *p_vlc_table, int i_escape_order, int b_chroma);
typedef int (*cavs_bitstream_get_mvd_t)(cavs_decoder *p, int i_list, int mvd_scan_idx, int xy_idx);
typedef int (*cavs_bitstream_get_ref_p_t)(cavs_decoder *p, int ref_scan_idx);
typedef int (*cavs_bitstream_get_ref_b_t)(cavs_decoder *p, int i_list, int ref_scan_idx);

enum syntax_element
{
	SYNTAX_SKIP_RUN,
	SYNTAX_MBTYPE_P,
	SYNTAX_MBTYPE_B,
	SYNTAX_INTRA_LUMA_PRED_MODE,
	SYNTAX_INTRA_CHROMA_PRED_MODE,
	SYNTAX_INTRA_CBP,
	SYNTAX_INTER_CBP,
	SYNTAX_DQP,
	//SYNTAX_MVD,
	SYNTAX_REF_P,
	SYNTAX_REF_B,
	SYNTAX_MB_PART_TYPE
};

enum macroblock_position_e
{
	MB_LEFT = 0x01,
	MB_TOP = 0x02,
	MB_TOPRIGHT = 0x04,
	MB_TOPLEFT = 0x08,
	MB_DOWNLEFT = 0x10,

  //MB_PRIVATE  = 0x10,
  ALL_NEIGHBORS = 0x1f,
};

#if B_MB_WEIGHTING
typedef void (*cavs_avg_func)( uint8_t *dst,  int i_dst,  uint8_t *src, int i_src );
#endif

typedef void (*cavs_luma_mc_func)(uint8_t *dst/*align width (8 or 16)*/, uint8_t *src/*align 1*/, int stride);
typedef void (*cavs_chroma_mc_func)(uint8_t *dst/*align 8*/, uint8_t *src/*align 1*/, int srcStride, int h, int x, int y);

//typedef void (*luma_mc_func)(uint8_t *dst/*align width (8 or 16)*/, uint8_t *src/*align 1*/, int stride);
typedef void (*cavs_intra_pred_luma)(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top, uint8_t *p_left);
typedef void (*cavs_intra_pred_chroma)(uint8_t *p_dest, int neighbor, int i_stride, uint8_t *p_top,uint8_t *p_left);
#if HAVE_MMX
typedef void (*cavs_filter_lv)(cavs_decoder *p,uint8_t *d, int stride, /*int alpha, int beta, int tc,*/int i_qp, int bs1, int bs2) ;
typedef void (*cavs_filter_lh)(cavs_decoder *p,uint8_t *d, int stride, /*int alpha, int beta, int tc,*/int i_qp, int bs1, int bs2) ;
typedef void (*cavs_filter_cv)(cavs_decoder *p,uint8_t *d, int stride, /*int alpha, int beta, int tc,*/int i_qp, int bs1, int bs2) ;
typedef void (*cavs_filter_ch)(cavs_decoder *p,uint8_t *d, int stride, /*int alpha, int beta, int tc,*/int i_qp, int bs1, int bs2) ;
#endif

struct tagcavs_decoder
{
    cavs_bitstream s;
    xavs_video_sequence_header vsh;
	xavs_video_sequence_header old;
    xavs_picture_header ph;
    xavs_slice_header sh;
    uint8_t user_data;
    xavs_sequence_display_extension sde;
    xavs_copyright_extension ce;
    xavs_camera_parameters_extension cpe;
    xavs_picture_display_extension pde;
    uint8_t b_extention_flag;
   
    uint8_t i_video_edit_code_flag;

    uint32_t i_frame_num;

    uint8_t b_get_video_sequence_header;
    uint8_t b_get_i_picture_header;
    uint8_t b_have_pred;
    uint32_t i_mb_width, i_mb_height, i_mb_num, i_mb_num_half;
    uint32_t i_mb_x, i_mb_y, i_mb_index, i_mb_offset;  
    uint32_t b_complete; /* finish decoding one frame */ 
    uint32_t i_mb_flags; 
    uint32_t b_first_line; 
    uint32_t i_slice_mb_end;
    uint32_t i_slice_mb_end_fld[2];

    uint32_t i_neighbour4[16];

    xavs_image image[3]; /* alloc 3 frame memory for yuv */
    xavs_image ref[4]; /* reference field or frame, not alloc memory */
    
    xavs_image *p_save[3];/* backup point , not alloc memory */
    xavs_image cur; /* current decode frame */

#if THREADS_OPT
    /* add for aec moudle */    
    xavs_image image_aec[3]; /* alloc 3 frame memory for yuv */
    xavs_image ref_aec[4]; /* reference field or frame, not alloc memory */
    xavs_image *p_save_aec[3];/* backup point , not alloc memory */
    xavs_image cur_aec; /* current decode frame */
#endif

    xavs_image *last_delayed_pframe;
    int i_luma_offset[4];//四个块相对于X0的地址偏移

    int b_bottom;
    
    int copy_flag3;
       
    ///以下数据结构 部分来源于ff_mpeg
    //这些都是计算运动矢量的系数，用于加快速度
    int i_sym_factor;    ///<用于B块的对称模式
    int i_direct_den[4]; ///< 用于B块的直接模式
    int i_scale_den[4];  ///< 用于临近块的预测运动矢量的计算
    int i_ref_distance[4]; /* four ref-field at most */

    uint8_t *p_y, *p_cb, *p_cr, *p_edge;

#if B_MB_WEIGHTING
	uint8_t *p_back_y, *p_back_cb, *p_back_cr;
#endif

    int i_mb_type;	//当前宏块的类型
    int i_cbp_code;
    int i_left_qp;
    uint8_t *p_top_qp;//用于宏块的环路滤波
    int i_qp;//当前使用的qp，
    int b_fixed_qp;//固定qp标志，可以在slice中改变
    int i_cbp;//当前宏块的cbp
    int b_low_delay;

#if B_MB_WEIGHTING
    int weighting_prediction; /* MB weighting prediction flag */
    uint8_t *mb_line_buffer[3]; /* temp buffer for backward mc */     
#endif

    /** 
       0:    D3  B2  B3  C2
       4:    A1  X0  X1   -
       8:    A3  X2  X3   - */
    //24个保存前向后向各块运动矢量
    xavs_vector mv[24];			/*mv context of current block*/
    xavs_vector *p_top_mv[2];
    xavs_vector *p_col_mv;		/*mv buffer of colocated ref frame(for direct mode)*/

    /** luma pred mode cache
       0:	 D   B1  B2  B3  B4
       5:    A1  X0  X1  X2  X3
       10:   A2  X4  X5  X6  X7
       15:   A3  X8  X9 X10 X11
       20:   A4 X12 X13 X14 X15
    */
    int i_intra_pred_mode_y[25];	//
    int *p_top_intra_pred_mode_y;//保存上面一行的亮度预测模式
    int i_pred_mode_chroma;	//当前色度宏块的预测模式

    //for CABAC
    int8_t i_mb_type_left;		//左边宏块的类型
    int8_t *p_mb_type_top;		//上边行宏块的类型
    int8_t i_chroma_pred_mode_left;
    int8_t *p_chroma_pred_mode_top;
    int8_t i_cbp_left;
    int8_t *p_cbp_top;
    int i_last_dqp;
    /** mvd cache
       0:    A1  X0  X1
       3:    A3  X2  X3   */
    int16_t p_mvd[2][6][2];			//[FWD/BWD][pos][x/y]
    int8_t (*p_ref_top)[2][2];		//[FWD/BWD][b8_pos]
    /** ref cache
       0:	 D3	 B2  B3
       3:    A1  X0  X1
       6:    A3  X2  X3   */
    int8_t p_ref[2][9];				//[FWD/BWD][pos]

    //这里宏块内不同的块对应的边缘不一样甚至用到刚解码的数据，或者由于有些右边块并未解码所以限制了一些预测模式的是使用
    //所有的这些都笔削在deblock前保存下来
    //用于保存帧内预测的当前宏块临近的上面行的y样本标准中c[0~16]
    uint8_t *p_top_border_y,*p_top_border_cb,*p_top_border_cr; 
    //用于保存帧内预测的当前宏块临近的左边行的y样本
    uint8_t i_left_border_y[26],i_left_border_cb[10],i_left_border_cr[10];
    //用于中间边界样本的保存，用于X1,X3的预测
    uint8_t i_internal_border_y[26];
    uint8_t i_topleft_border_y,i_topleft_border_cb,i_topleft_border_cr;//保存标准中的c[0]或r[0]
    uint8_t *p_col_type_base;
    //用于保存宏块的类型，事实只有B_SKIP和B_Direct会用到，所以只需要保存P帧的就可以了
    uint8_t *p_col_type;//当前宏块类型的偏移地址	
    //保存残差数据
    DCTELEM *p_block;
    int level_buf[64];
    int run_buf[64];

#if THREADS_OPT
	int protect_array[64]; /* FIXIT */

    /* run and level coeffs */
    int (*level_buf_tab)[6][64];/*[block][coeff]*/
    int (*run_buf_tab)[6][64];
    int (*num_buf_tab)[6];

    /* mb type */
    int *i_mb_type_tab;

    /* mb qp */
    int *i_qp_tab;

    /* cbp */
    int *i_cbp_tab;

    /* mv */
    xavs_vector (*mv_tab)[24];

    /* luma pred mode */
    int (*i_intra_pred_mode_y_tab)[25];

    /* chroma pred mode */
    int *i_pred_mode_chroma_tab;

    /* mvd */
    int16_t (*p_mvd_tab)[2][6][2];

    /* refer index */
    int8_t (*p_ref_tab)[2][9];

	/* weighting prediction */
#if B_MB_WEIGHTING
    int *weighting_prediction_tab;

	/* keep this for accelerate mode of field */
    uint8_t  b_slice_weighting_flag[2]; /*[top/bot]*/
	uint32_t i_luma_scale[2][4]; /*[top/bot][refnum]*/
	int32_t  i_luma_shift[2][4]; /*[top/bot][refnum]*/
	uint32_t i_chroma_scale[2][4]; /*[top/bot][refnum]*/
	int32_t  i_chroma_shift[2][4]; /*[top/bot][refnum]*/
	uint8_t  b_mb_weighting_flag[2]; /*[top/bot]*/
#endif

#endif

    /*2 for 1/4 subpel, 3 for 1/8 subpel...*/
    int i_subpel_precision;
    /*4 for 1/4 subpel, 8 for 1/8 subpel...*/
    int i_uint_length;
    int vbs_mb_intra_pred_flag ;
    int vbs_mb_part_intra_pred_flag[4] ;
    int vbs_mb_part_transform_4x4_flag[4];
    int quant_coeff_pred_flag;
    int pred_mode_4x4_flag[4];
    int intra_luma_pred_mode_4x4[4];
    int pred_mode_flag;
    int i_cbp_4x4[4];
    int i_cbp_part[4];

    //aec for guangdian profile
    cavs_cabac_t cabac;

    struct
    {
        unsigned int i_neighbour;
        unsigned int i_neighbour8[4];       /* neighbours of each 8x8 or 4x4 block that are available */
    }mb;

    int copy_flag1;
    
    /* MC */
    cavs_luma_mc_func put_cavs_qpel_pixels_tab[2][16];
    cavs_luma_mc_func avg_cavs_qpel_pixels_tab[2][16];
    cavs_chroma_mc_func put_h264_chroma_pixels_tab[3];
    cavs_chroma_mc_func avg_h264_chroma_pixels_tab[3];

    /* intra predict */
    cavs_intra_pred_luma cavs_intra_luma[8];
    cavs_intra_pred_chroma cavs_intra_chroma[7];

#if B_MB_WEIGHTING
    /* weighting prediction avg */
    cavs_avg_func cavs_avg_pixels_tab[3]; /* 0 :16x16 1: 8x8 2: 4x4 */
#endif
    
#if HAVE_MMX
    /*deblock*/
    cavs_filter_lv filter_lv;
    cavs_filter_lh filter_lh;
    cavs_filter_cv filter_cv;
    cavs_filter_ch filter_ch;
#endif        

    /* CPU flags */
    unsigned int cpu; 

#define SYNTAX_NUM 11
    cavs_bitstream_get_t bs_read[SYNTAX_NUM];
    cavs_bitstream_get_coeffs_t bs_read_coeffs;
    cavs_bitstream_get_mvd_t bs_read_mvd;
    cavs_bitstream_get_ref_p_t bs_read_ref_p;
    cavs_bitstream_get_ref_b_t bs_read_ref_b;

    cavs_param param;

    int b_skip_first;

    frame_pack *Frame; /* used for frame pack of multi-slice */
    
    InputStream *p_stream; /* locate stream */
    
    int copy_flag2;
    
    /* thread */
    int b_thread_flag;
    cavs_decoder *thread[XAVS_THREAD_MAX];
	int b_threadpool_flag;
    cavs_threadpool_t *threadpool;

    cavs_pthread_mutex_t mutex;
    cavs_pthread_cond_t cv;
    int i_thread_idx;
    int b_thread_active;
    cavs_pthread_t id;

    /*add for error detect*/
    int b_error_flag; /* set to 1 when error detected , default 0 */

    /* add for weighting quant */ 
    int b_weight_quant_enable;
    short UseDefaultScalingMatrixFlag[2];
    short cur_wq_matrix[64];
    short wq_matrix[2][64];
    short wq_param[2][6];

    int i_frame_decoded; /*  add for debug */

    /* AEC and REC thread */
    int b_accelerate_flag;
    cavs_decoder *unused[2]; /* for AEC decode */
    cavs_decoder *unused_backup[2]; /* for handle free */
    cavs_decoder *current[2]; /* for REC recon */
    
    int i_mb_y_start; /* backup start value of AEC thread */
    int i_mb_index_start; /* */
    int i_mb_y_start_fld[2]; /* backup start value of AEC thread */
    int i_mb_index_start_fld[2]; /* */
    cavs_decoder *p_m;
    frame_pack *fld;
    int slice_count;
    int field_count;
};

static UNUSED int hd;
static UNUSED int hu;
static UNUSED int vr;

static const unsigned char LEVRUN_INTRA[7][16]= 
{
	{ 4, 3, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{ 6, 4, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{ 6, 4, 4, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{ 8, 5, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{10, 5, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{12, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{15, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

static const unsigned char LEVRUN_INTER[7][16]= 
{
	{ 4, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
	{ 5, 3, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
	{ 5, 3, 3, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
	{ 6, 4, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{ 7, 4, 3, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{ 9, 5, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{13, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

static const char VLC_GC_Order_INTRA[7][2] =      //[tableindex][grad/maxlevel]
{
	{1,22}, {0,22}, {1,22}, {1,22}, {0,22}, {1,22}, {0,22}
};

static const char VLC_GC_Order_INTER[7][2] =     //[tableindex][grad/maxlevel]
{
	{1,22}, {0,22}, {0,22}, {0,22}, {0,22}, {0,22}, {0,22}
};

static const uint8_t dequant_shift[64] = 
	{
		14,14,14,14,14,14,14,14,
		13,13,13,13,13,13,13,13,
		13,12,12,12,12,12,12,12,
		11,11,11,11,11,11,11,11,
		11,10,10,10,10,10,10,10,
		10, 9, 9, 9, 9, 9, 9, 9,
		9, 8, 8, 8, 8, 8, 8, 8,
		7, 7, 7, 7, 7, 7, 7, 7
	};

	static const uint16_t dequant_mul[64] = 
	{
		32768,36061,38968,42495,46341,50535,55437,60424,
		32932,35734,38968,42495,46177,50535,55109,59933,
		65535,35734,38968,42577,46341,50617,55027,60097,
		32809,35734,38968,42454,46382,50576,55109,60056,
		65535,35734,38968,42495,46320,50515,55109,60076,
		65535,35744,38968,42495,46341,50535,55099,60087,
		65535,35734,38973,42500,46341,50535,55109,60097,
		32771,35734,38965,42497,46341,50535,55109,60099
	};
	static const uint8_t zigzag_progressive_4x4[16]=//图35
	{
		 0, 1,4, 8, 
		 5, 2, 3, 6, 
		 9, 12 ,13, 10,
		 7, 11, 14, 15, 
	};
	static const uint8_t zigzag_progressive[64]=//图33
	{
			0, 1, 8, 16, 9, 2, 3, 10,
			17, 24, 32, 25, 18, 11, 4, 5,
			12, 19, 26, 33, 40, 48, 41, 34,
			27, 20, 13, 6, 7, 14, 21, 28,
			35, 42, 49, 56, 57, 50, 43, 36,
			29, 22, 15, 23, 30, 37, 44, 51,
			58, 59, 52, 45, 38, 31, 39, 46,
			53, 60, 61, 54, 47, 55, 62, 63
	};
	
	static const uint8_t zigzag_field[64]=//图34
	{
	    0, 8, 16, 1, 24, 32, 9, 17,
		40, 48, 25, 2, 10, 56, 33, 18,
		3, 41, 49, 26, 11, 19, 4, 57,
		34, 12, 42, 27, 20, 50, 35, 28,
		5, 13, 58, 43, 36, 21, 6, 29,
		51, 44, 14, 22, 37, 59, 52, 30,
		45, 60, 38, 53, 46, 61, 54, 7,
		62, 15, 23, 31, 39, 47, 55, 63
	};

static const uint8_t chroma_qp[64] = 
{
	0,  1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,
	16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,
	32,33,34,35,36,37,38,39,40,41,42,42,43,43,44,44,
	45,45,46,46,47,47,48,48,48,49,49,49,50,50,50,51
};
static const char intra_2dvlc_4x4[7][16][16]=
{
	{
		{  0,  8, 16, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{  2, 18, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{  4, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{  6, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 12, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 10, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  5,  9, 15, 27, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  3, 13, 23, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  7, 19, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 11, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 17, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		//AVSM-1498
		{  0/*2*/, 1 /*0*/,  3,  9, 15, 23, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  5, 11, 19, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  7, 17, 27, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 13, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 21, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  3,  5,  9, 13, 23, 25, 31, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  7, 11, 17, 27, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 15, 19, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 21, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  3,  5,  7, 11, 15, 17, 23, 31, 35, -1, -1, -1, -1, -1},
		{ -1,  9, 13, 19, 27, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 21, 25, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  3,  5,  7,  9, 11, 13, 19, 21, 25, 31, 35, -1, -1, -1},
		{ -1, 15, 17, 23, 29, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 27, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  3,  1,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 31, 29, 33},
		{ -1, 25, 27, 35, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	}
};
static const char inter_2dvlc_4x4[7][16][14] = 
{
	{
		{  0, 10, 22, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{  2, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{  4, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{  6, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{  8, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 12, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  7, 15, 27, 37, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  3, 17, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  5, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  9, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 11, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  9, 17, 23, 37, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  3, 15, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  5, 19, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  7, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 11, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 13, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  7, 11, 21, 27, 35, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  3, 13, 25, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  5, 17, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  9, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 15, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 23, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  3,  7, 13, 21, 27, 35, -1, -1, -1, -1, -1, -1},
		{ -1,  5, 11, 19, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1,  9, 17, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 15, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 23, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  3,  5,  9, 11, 17, 21, 29, 33, -1, -1, -1, -1},
		{ -1,  7, 13, 19, 25, 35, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 15, 23, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	},
	{
		{  0,  1,  3,  5,  7,  9, 11, 13, 17, 21, 23, 27, 33, 37},
		{ -1, 15, 19, 25, 29, 35, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	}
};
static const xavs_vlc intra_2dvlc[7] = 
{
	{
		   { //level / run / table_inc
			   {  1, 1, 1},{ -1, 1, 1},{  1, 2, 1},{ -1, 2, 1},{  1, 3, 1},{ -1, 3, 1},
			   {  1, 4, 1},{ -1, 4, 1},{  1, 5, 1},{ -1, 5, 1},{  1, 6, 1},{ -1, 6, 1},
			   {  1, 7, 1},{ -1, 7, 1},{  1, 8, 1},{ -1, 8, 1},{  1, 9, 1},{ -1, 9, 1},
			   {  1,10, 1},{ -1,10, 1},{  1,11, 1},{ -1,11, 1},{  2, 1, 2},{ -2, 1, 2},
			   {  1,12, 1},{ -1,12, 1},{  1,13, 1},{ -1,13, 1},{  1,14, 1},{ -1,14, 1},
			   {  1,15, 1},{ -1,15, 1},{  2, 2, 2},{ -2, 2, 2},{  1,16, 1},{ -1,16, 1},
			   {  1,17, 1},{ -1,17, 1},{  3, 1, 3},{ -3, 1, 3},{  1,18, 1},{ -1,18, 1},
			   {  1,19, 1},{ -1,19, 1},{  2, 3, 2},{ -2, 3, 2},{  1,20, 1},{ -1,20, 1},
			   {  1,21, 1},{ -1,21, 1},{  2, 4, 2},{ -2, 4, 2},{  1,22, 1},{ -1,22, 1},
			   {  2, 5, 2},{ -2, 5, 2},{  1,23, 1},{ -1,23, 1},{   EOB }
		   },
			   //level_add
		   { 0, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2, 2, 2, 2, 2,-1,-1,-1},
		   2, //golomb_order
		   0, //inc_limit  和8.3.1对应
		   23, //max_run
	   },
	   {
		   { //level / run
			   {  1, 1, 0},{ -1, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  2, 1, 1},{ -2, 1, 1},
			   {  1, 3, 0},{ -1, 3, 0},{   EOB   },{  1, 4, 0},{ -1, 4, 0},{  1, 5, 0},
			   { -1, 5, 0},{  1, 6, 0},{ -1, 6, 0},{  3, 1, 2},{ -3, 1, 2},{  2, 2, 1},
			   { -2, 2, 1},{  1, 7, 0},{ -1, 7, 0},{  1, 8, 0},{ -1, 8, 0},{  1, 9, 0},
			   { -1, 9, 0},{  2, 3, 1},{ -2, 3, 1},{  4, 1, 2},{ -4, 1, 2},{  1,10, 0},
			   { -1,10, 0},{  1,11, 0},{ -1,11, 0},{  2, 4, 1},{ -2, 4, 1},{  3, 2, 2},
			   { -3, 2, 2},{  1,12, 0},{ -1,12, 0},{  2, 5, 1},{ -2, 5, 1},{  5, 1, 3},
			   { -5, 1, 3},{  1,13, 0},{ -1,13, 0},{  2, 6, 1},{ -2, 6, 1},{  1,14, 0},
			   { -1,14, 0},{  2, 7, 1},{ -2, 7, 1},{  2, 8, 1},{ -2, 8, 1},{  3, 3, 2},
			   { -3, 3, 2},{  6, 1, 3},{ -6, 1, 3},{  1,15, 0},{ -1,15, 0}
		   },
			   //level_add
		   { 0, 7, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,-1,
		   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		   2, //golomb_order
		   1, //inc_limit
		   15, //max_run
		   },
		   {
			   { //level / run
				   {  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  1, 2, 0},{ -1, 2, 0},
				   {  3, 1, 1},{ -3, 1, 1},{   EOB   },{  1, 3, 0},{ -1, 3, 0},{  2, 2, 0},
				   { -2, 2, 0},{  4, 1, 1},{ -4, 1, 1},{  1, 4, 0},{ -1, 4, 0},{  5, 1, 2},
				   { -5, 1, 2},{  1, 5, 0},{ -1, 5, 0},{  3, 2, 1},{ -3, 2, 1},{  2, 3, 0},
				   { -2, 3, 0},{  1, 6, 0},{ -1, 6, 0},{  6, 1, 2},{ -6, 1, 2},{  2, 4, 0},
				   { -2, 4, 0},{  1, 7, 0},{ -1, 7, 0},{  4, 2, 1},{ -4, 2, 1},{  7, 1, 2},
				   { -7, 1, 2},{  3, 3, 1},{ -3, 3, 1},{  2, 5, 0},{ -2, 5, 0},{  1, 8, 0},
				   { -1, 8, 0},{  2, 6, 0},{ -2, 6, 0},{  8, 1, 3},{ -8, 1, 3},{  1, 9, 0},
				   { -1, 9, 0},{  5, 2, 2},{ -5, 2, 2},{  3, 4, 1},{ -3, 4, 1},{  2, 7, 0},
				   { -2, 7, 0},{  9, 1, 3},{ -9, 1, 3},{  1,10, 0},{ -1,10, 0}
			   },
				   //level_add
			   { 0,10, 6, 4, 4, 3, 3, 3, 2, 2, 2,-1,-1,-1,-1,-1,-1,
			   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			   2, //golomb_order
			   2, //inc_limit
			   10, //max_run
		   },
		   {
			   { //level / run
				   {  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},{ -3, 1, 0},
				   {  1, 2, 0},{ -1, 2, 0},{   EOB   },{  4, 1, 0},{ -4, 1, 0},{  5, 1, 1},
				   { -5, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  1, 3, 0},{ -1, 3, 0},{  6, 1, 1},
				   { -6, 1, 1},{  3, 2, 0},{ -3, 2, 0},{  7, 1, 1},{ -7, 1, 1},{  1, 4, 0},
				   { -1, 4, 0},{  8, 1, 2},{ -8, 1, 2},{  2, 3, 0},{ -2, 3, 0},{  4, 2, 0},
				   { -4, 2, 0},{  1, 5, 0},{ -1, 5, 0},{  9, 1, 2},{ -9, 1, 2},{  5, 2, 1},
				   { -5, 2, 1},{  2, 4, 0},{ -2, 4, 0},{ 10, 1, 2},{-10, 1, 2},{  3, 3, 0},
				   { -3, 3, 0},{  1, 6, 0},{ -1, 6, 0},{ 11, 1, 3},{-11, 1, 3},{  6, 2, 1},
				   { -6, 2, 1},{  1, 7, 0},{ -1, 7, 0},{  2, 5, 0},{ -2, 5, 0},{  3, 4, 0},
				   { -3, 4, 0},{ 12, 1, 3},{-12, 1, 3},{  4, 3, 0},{ -4, 3, 0}
			   },
				   //level_add
			   { 0,13, 7, 5, 4, 3, 2, 2,-1,-1,-1 -1,-1,-1,-1,-1,-1,
			   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			   2, //golomb_order
			   4, //inc_limit
			   7, //max_run
			   },
			   {
				   { //level / run
					   {  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},{ -3, 1, 0},
					   {   EOB   },{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
					   { -6, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 1},
					   { -8, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  9, 1, 1},{ -9, 1, 1},{ 10, 1, 1},
					   {-10, 1, 1},{  1, 3, 0},{ -1, 3, 0},{  3, 2, 0},{ -3, 2, 0},{ 11, 1, 2},
					   {-11, 1, 2},{  4, 2, 0},{ -4, 2, 0},{ 12, 1, 2},{-12, 1, 2},{ 13, 1, 2},
					   {-13, 1, 2},{  5, 2, 0},{ -5, 2, 0},{  1, 4, 0},{ -1, 4, 0},{  2, 3, 0},
					   { -2, 3, 0},{ 14, 1, 2},{-14, 1, 2},{  6, 2, 0},{ -6, 2, 0},{ 15, 1, 2},
					   {-15, 1, 2},{ 16, 1, 2},{-16, 1, 2},{  3, 3, 0},{ -3, 3, 0},{  1, 5, 0},
					   { -1, 5, 0},{  7, 2, 0},{ -7, 2, 0},{ 17, 1, 2},{-17, 1, 2}
				   },
					   //level_add
				   { 0,18, 8, 4, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
				   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				   2, //golomb_order
				   7, //inc_limit
				   5, //max_run
			   },
			   {
				   { //level / run
					   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
					   { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
					   { -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 0},{ -8, 1, 0},{  9, 1, 0},
					   { -9, 1, 0},{ 10, 1, 0},{-10, 1, 0},{  1, 2, 0},{ -1, 2, 0},{ 11, 1, 1},
					   {-11, 1, 1},{ 12, 1, 1},{-12, 1, 1},{ 13, 1, 1},{-13, 1, 1},{  2, 2, 0},
					   { -2, 2, 0},{ 14, 1, 1},{-14, 1, 1},{ 15, 1, 1},{-15, 1, 1},{  3, 2, 0},
					   { -3, 2, 0},{ 16, 1, 1},{-16, 1, 1},{  1, 3, 0},{ -1, 3, 0},{ 17, 1, 1},
					   {-17, 1, 1},{  4, 2, 0},{ -4, 2, 0},{ 18, 1, 1},{-18, 1, 1},{  5, 2, 0},
					   { -5, 2, 0},{ 19, 1, 1},{-19, 1, 1},{ 20, 1, 1},{-20, 1, 1},{  6, 2, 0},
					   { -6, 2, 0},{ 21, 1, 1},{-21, 1, 1},{  2, 3, 0},{ -2, 3, 0}
				   },
					   //level_add
				   { 0,22, 7, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
				   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				   2, //golomb_order
				   10, //inc_limit
				   3, //max_run
				   },
				   {
					   { //level / run
						   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
						   { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
						   { -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 0},{ -8, 1, 0},{  9, 1, 0},
						   { -9, 1, 0},{ 10, 1, 0},{-10, 1, 0},{ 11, 1, 0},{-11, 1, 0},{ 12, 1, 0},
						   {-12, 1, 0},{ 13, 1, 0},{-13, 1, 0},{ 14, 1, 0},{-14, 1, 0},{ 15, 1, 0},
						   {-15, 1, 0},{ 16, 1, 0},{-16, 1, 0},{  1, 2, 0},{ -1, 2, 0},{ 17, 1, 0},
						   {-17, 1, 0},{ 18, 1, 0},{-18, 1, 0},{ 19, 1, 0},{-19, 1, 0},{ 20, 1, 0},
						   {-20, 1, 0},{ 21, 1, 0},{-21, 1, 0},{  2, 2, 0},{ -2, 2, 0},{ 22, 1, 0},
						   {-22, 1, 0},{ 23, 1, 0},{-23, 1, 0},{ 24, 1, 0},{-24, 1, 0},{ 25, 1, 0},
						   {-25, 1, 0},{  3, 2, 0},{ -3, 2, 0},{ 26, 1, 0},{-26, 1, 0}
					   },
						   //level_add
					   { 0,27, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
					   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
					   2, //golomb_order
					   INT_MAX, //inc_limit
					   2, //max_run
				   }
};

static const xavs_vlc inter_2dvlc[7] = 
{
	   {
		   { //level / run
			   {  1, 1, 1},{ -1, 1, 1},{  1, 2, 1},{ -1, 2, 1},{  1, 3, 1},{ -1, 3, 1},
			   {  1, 4, 1},{ -1, 4, 1},{  1, 5, 1},{ -1, 5, 1},{  1, 6, 1},{ -1, 6, 1},
			   {  1, 7, 1},{ -1, 7, 1},{  1, 8, 1},{ -1, 8, 1},{  1, 9, 1},{ -1, 9, 1},
			   {  1,10, 1},{ -1,10, 1},{  1,11, 1},{ -1,11, 1},{  1,12, 1},{ -1,12, 1},
			   {  1,13, 1},{ -1,13, 1},{  2, 1, 2},{ -2, 1, 2},{  1,14, 1},{ -1,14, 1},
			   {  1,15, 1},{ -1,15, 1},{  1,16, 1},{ -1,16, 1},{  1,17, 1},{ -1,17, 1},
			   {  1,18, 1},{ -1,18, 1},{  1,19, 1},{ -1,19, 1},{  3, 1, 3},{ -3, 1, 3},
			   {  1,20, 1},{ -1,20, 1},{  1,21, 1},{ -1,21, 1},{  2, 2, 2},{ -2, 2, 2},
			   {  1,22, 1},{ -1,22, 1},{  1,23, 1},{ -1,23, 1},{  1,24, 1},{ -1,24, 1},
			   {  1,25, 1},{ -1,25, 1},{  1,26, 1},{ -1,26, 1},{   EOB   }
		   },
			   //level_add
		   { 0, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		   3, //golomb_order
		   0, //inc_limit
		   26 //max_run
	   },
	   {
		   { //level / run
			   {  1, 1, 0},{ -1, 1, 0},{   EOB   },{  1, 2, 0},{ -1, 2, 0},{  1, 3, 0},
			   { -1, 3, 0},{  1, 4, 0},{ -1, 4, 0},{  1, 5, 0},{ -1, 5, 0},{  1, 6, 0},
			   { -1, 6, 0},{  2, 1, 1},{ -2, 1, 1},{  1, 7, 0},{ -1, 7, 0},{  1, 8, 0},
			   { -1, 8, 0},{  1, 9, 0},{ -1, 9, 0},{  1,10, 0},{ -1,10, 0},{  2, 2, 1},
			   { -2, 2, 1},{  1,11, 0},{ -1,11, 0},{  1,12, 0},{ -1,12, 0},{  3, 1, 2},
			   { -3, 1, 2},{  1,13, 0},{ -1,13, 0},{  1,14, 0},{ -1,14, 0},{  2, 3, 1},
			   { -2, 3, 1},{  1,15, 0},{ -1,15, 0},{  2, 4, 1},{ -2, 4, 1},{  1,16, 0},
			   { -1,16, 0},{  2, 5, 1},{ -2, 5, 1},{  1,17, 0},{ -1,17, 0},{  4, 1, 3},
			   { -4, 1, 3},{  2, 6, 1},{ -2, 6, 1},{  1,18, 0},{ -1,18, 0},{  1,19, 0},
			   { -1,19, 0},{  2, 7, 1},{ -2, 7, 1},{  3, 2, 2},{ -3, 2, 2}
		   },
			   //level_add
		   { 0, 5, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2,-1,-1,-1,-1,-1,-1,-1},
		   2, //golomb_order
		   1, //inc_limit
		   19 //max_run
		   },
		   {
			   { //level / run
				   {  1, 1, 0},{ -1, 1, 0},{   EOB   },{  1, 2, 0},{ -1, 2, 0},{  2, 1, 0},
				   { -2, 1, 0},{  1, 3, 0},{ -1, 3, 0},{  1, 4, 0},{ -1, 4, 0},{  3, 1, 1},
				   { -3, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  1, 5, 0},{ -1, 5, 0},{  1, 6, 0},
				   { -1, 6, 0},{  1, 7, 0},{ -1, 7, 0},{  2, 3, 0},{ -2, 3, 0},{  4, 1, 2},
				   { -4, 1, 2},{  1, 8, 0},{ -1, 8, 0},{  3, 2, 1},{ -3, 2, 1},{  2, 4, 0},
				   { -2, 4, 0},{  1, 9, 0},{ -1, 9, 0},{  1,10, 0},{ -1,10, 0},{  5, 1, 2},
				   { -5, 1, 2},{  2, 5, 0},{ -2, 5, 0},{  1,11, 0},{ -1,11, 0},{  2, 6, 0},
				   { -2, 6, 0},{  1,12, 0},{ -1,12, 0},{  3, 3, 1},{ -3, 3, 1},{  6, 1, 2},
				   { -6, 1, 2},{  4, 2, 2},{ -4, 2, 2},{  1,13, 0},{ -1,13, 0},{  2, 7, 0},
				   { -2, 7, 0},{  3, 4, 1},{ -3, 4, 1},{  1,14, 0},{ -1,14, 0}
			   },
				   //level_add
			   { 0, 7, 5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,-1,-1,
			   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			   2, //golomb_order
			   2, //inc_limit
			   14 //max_run
		   },
		   {
			   { //level / run
				   {  1, 1, 0},{ -1, 1, 0},{   EOB   },{  2, 1, 0},{ -2, 1, 0},{  1, 2, 0},
				   { -1, 2, 0},{  3, 1, 0},{ -3, 1, 0},{  1, 3, 0},{ -1, 3, 0},{  2, 2, 0},
				   { -2, 2, 0},{  4, 1, 1},{ -4, 1, 1},{  1, 4, 0},{ -1, 4, 0},{  5, 1, 1},
				   { -5, 1, 1},{  1, 5, 0},{ -1, 5, 0},{  3, 2, 0},{ -3, 2, 0},{  2, 3, 0},
				   { -2, 3, 0},{  1, 6, 0},{ -1, 6, 0},{  6, 1, 1},{ -6, 1, 1},{  2, 4, 0},
				   { -2, 4, 0},{  1, 7, 0},{ -1, 7, 0},{  4, 2, 1},{ -4, 2, 1},{  7, 1, 2},
				   { -7, 1, 2},{  3, 3, 0},{ -3, 3, 0},{  1, 8, 0},{ -1, 8, 0},{  2, 5, 0},
				   { -2, 5, 0},{  8, 1, 2},{ -8, 1, 2},{  1, 9, 0},{ -1, 9, 0},{  3, 4, 0},
				   { -3, 4, 0},{  2, 6, 0},{ -2, 6, 0},{  5, 2, 1},{ -5, 2, 1},{  1,10, 0},
				   { -1,10, 0},{  9, 1, 2},{ -9, 1, 2},{  4, 3, 1},{ -4, 3, 1}
			   },
				   //level_add
			   { 0,10, 6, 5, 4, 3, 3, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,
			   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			   2, //golomb_order
			   3, //inc_limit
			   10 //max_run
			   },
			   {
				   { //level / run
					   {  1, 1, 0},{ -1, 1, 0},{   EOB   },{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
					   { -3, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},
					   { -5, 1, 0},{  2, 2, 0},{ -2, 2, 0},{  1, 3, 0},{ -1, 3, 0},{  6, 1, 0},
					   { -6, 1, 0},{  3, 2, 0},{ -3, 2, 0},{  7, 1, 1},{ -7, 1, 1},{  1, 4, 0},
					   { -1, 4, 0},{  8, 1, 1},{ -8, 1, 1},{  2, 3, 0},{ -2, 3, 0},{  4, 2, 0},
					   { -4, 2, 0},{  1, 5, 0},{ -1, 5, 0},{  9, 1, 1},{ -9, 1, 1},{  5, 2, 0},
					   { -5, 2, 0},{  2, 4, 0},{ -2, 4, 0},{  1, 6, 0},{ -1, 6, 0},{ 10, 1, 2},
					   {-10, 1, 2},{  3, 3, 0},{ -3, 3, 0},{ 11, 1, 2},{-11, 1, 2},{  1, 7, 0},
					   { -1, 7, 0},{  6, 2, 0},{ -6, 2, 0},{  3, 4, 0},{ -3, 4, 0},{  2, 5, 0},
					   { -2, 5, 0},{ 12, 1, 2},{-12, 1, 2},{  4, 3, 0},{ -4, 3, 0}
				   },
					   //level_add
				   { 0,13, 7, 5, 4, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
				   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				   2, //golomb_order
				   6, //inc_limit
				   7  //max_run
			   },
			   {
				   { //level / run
					   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
					   { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  1, 2, 0},
					   { -1, 2, 0},{  6, 1, 0},{ -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 0},
					   { -8, 1, 0},{  2, 2, 0},{ -2, 2, 0},{  9, 1, 0},{ -9, 1, 0},{  1, 3, 0},
					   { -1, 3, 0},{ 10, 1, 1},{-10, 1, 1},{  3, 2, 0},{ -3, 2, 0},{ 11, 1, 1},
					   {-11, 1, 1},{  4, 2, 0},{ -4, 2, 0},{ 12, 1, 1},{-12, 1, 1},{  1, 4, 0},
					   { -1, 4, 0},{  2, 3, 0},{ -2, 3, 0},{ 13, 1, 1},{-13, 1, 1},{  5, 2, 0},
					   { -5, 2, 0},{ 14, 1, 1},{-14, 1, 1},{  6, 2, 0},{ -6, 2, 0},{  1, 5, 0},
					   { -1, 5, 0},{ 15, 1, 1},{-15, 1, 1},{  3, 3, 0},{ -3, 3, 0},{ 16, 1, 1},
					   {-16, 1, 1},{  2, 4, 0},{ -2, 4, 0},{  7, 2, 0},{ -7, 2, 0}
				   },
					   //level_add
				   { 0,17, 8, 4, 3, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
				   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				   2, //golomb_order
				   9, //inc_limit
				   5  //max_run
				   },
				   {
					   { //level / run
						   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
						   { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
						   { -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  8, 1, 0},
						   { -8, 1, 0},{  9, 1, 0},{ -9, 1, 0},{ 10, 1, 0},{-10, 1, 0},{ 11, 1, 0},
						   {-11, 1, 0},{ 12, 1, 0},{-12, 1, 0},{  2, 2, 0},{ -2, 2, 0},{ 13, 1, 0},
						   {-13, 1, 0},{  1, 3, 0},{ -1, 3, 0},{ 14, 1, 0},{-14, 1, 0},{ 15, 1, 0},
						   {-15, 1, 0},{  3, 2, 0},{ -3, 2, 0},{ 16, 1, 0},{-16, 1, 0},{ 17, 1, 0},
						   {-17, 1, 0},{ 18, 1, 0},{-18, 1, 0},{  4, 2, 0},{ -4, 2, 0},{ 19, 1, 0},
						   {-19, 1, 0},{ 20, 1, 0},{-20, 1, 0},{  2, 3, 0},{ -2, 3, 0},{  1, 4, 0},
						   { -1, 4, 0},{  5, 2, 0},{ -5, 2, 0},{ 21, 1, 0},{-21, 1, 0}
					   },
						   //level_add
					   { 0,22, 6, 3, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
					   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
					   2, //golomb_order
					   INT_MAX, //inc_limit
					   4 //max_run
				   }
};
 
static const xavs_vlc chroma_2dvlc[5] = 
{
	   {
		   { //level / run
			   {  1, 1, 1},{ -1, 1, 1},{  1, 2, 1},{ -1, 2, 1},{  1, 3, 1},{ -1, 3, 1},
			   {  1, 4, 1},{ -1, 4, 1},{  1, 5, 1},{ -1, 5, 1},{  1, 6, 1},{ -1, 6, 1},
			   {  1, 7, 1},{ -1, 7, 1},{  2, 1, 2},{ -2, 1, 2},{  1, 8, 1},{ -1, 8, 1},
			   {  1, 9, 1},{ -1, 9, 1},{  1,10, 1},{ -1,10, 1},{  1,11, 1},{ -1,11, 1},
			   {  1,12, 1},{ -1,12, 1},{  1,13, 1},{ -1,13, 1},{  1,14, 1},{ -1,14, 1},
			   {  1,15, 1},{ -1,15, 1},{  3, 1, 3},{ -3, 1, 3},{  1,16, 1},{ -1,16, 1},
			   {  1,17, 1},{ -1,17, 1},{  1,18, 1},{ -1,18, 1},{  1,19, 1},{ -1,19, 1},
			   {  1,20, 1},{ -1,20, 1},{  1,21, 1},{ -1,21, 1},{  1,22, 1},{ -1,22, 1},
			   {  2, 2, 2},{ -2, 2, 2},{  1,23, 1},{ -1,23, 1},{  1,24, 1},{ -1,24, 1},
			   {  1,25, 1},{ -1,25, 1},{  4, 1, 3},{ -4, 1, 3},{   EOB   }
		   },
			   //level_add
		   { 0, 5, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2, 2, 2, 2, 2, 2, 2,-1},
		   2, //golomb_order
		   0, //inc_limit
		   25 //max_run
	   },
	   {
		   { //level / run
			   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  2, 1, 1},
			   { -2, 1, 1},{  1, 3, 0},{ -1, 3, 0},{  1, 4, 0},{ -1, 4, 0},{  1, 5, 0},
			   { -1, 5, 0},{  1, 6, 0},{ -1, 6, 0},{  3, 1, 2},{ -3, 1, 2},{  1, 7, 0},
			   { -1, 7, 0},{  1, 8, 0},{ -1, 8, 0},{  2, 2, 1},{ -2, 2, 1},{  1, 9, 0},
			   { -1, 9, 0},{  1,10, 0},{ -1,10, 0},{  1,11, 0},{ -1,11, 0},{  4, 1, 2},
			   { -4, 1, 2},{  1,12, 0},{ -1,12, 0},{  1,13, 0},{ -1,13, 0},{  1,14, 0},
			   { -1,14, 0},{  2, 3, 1},{ -2, 3, 1},{  1,15, 0},{ -1,15, 0},{  2, 4, 1},
			   { -2, 4, 1},{  5, 1, 3},{ -5, 1, 3},{  3, 2, 2},{ -3, 2, 2},{  1,16, 0},
			   { -1,16, 0},{  1,17, 0},{ -1,17, 0},{  1,18, 0},{ -1,18, 0},{  2, 5, 1},
			   { -2, 5, 1},{  1,19, 0},{ -1,19, 0},{  1,20, 0},{ -1,20, 0}
		   },
			   //level_add
		   { 0, 6, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2, 2,-1,-1,-1,-1,-1,-1},
		   0, //golomb_order
		   1, //inc_limit
		   20 //max_run
		},
		{
			{ //level / run
				{  1, 1, 0},{ -1, 1, 0},{   EOB   },{  2, 1, 0},{ -2, 1, 0},{  1, 2, 0},
				{ -1, 2, 0},{  3, 1, 1},{ -3, 1, 1},{  1, 3, 0},{ -1, 3, 0},{  4, 1, 1},
				{ -4, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  1, 4, 0},{ -1, 4, 0},{  5, 1, 2},
				{ -5, 1, 2},{  1, 5, 0},{ -1, 5, 0},{  3, 2, 1},{ -3, 2, 1},{  2, 3, 0},
				{ -2, 3, 0},{  1, 6, 0},{ -1, 6, 0},{  6, 1, 2},{ -6, 1, 2},{  1, 7, 0},
				{ -1, 7, 0},{  2, 4, 0},{ -2, 4, 0},{  7, 1, 2},{ -7, 1, 2},{  1, 8, 0},
				{ -1, 8, 0},{  4, 2, 1},{ -4, 2, 1},{  1, 9, 0},{ -1, 9, 0},{  3, 3, 1},
				{ -3, 3, 1},{  2, 5, 0},{ -2, 5, 0},{  2, 6, 0},{ -2, 6, 0},{  8, 1, 2},
				{ -8, 1, 2},{  1,10, 0},{ -1,10, 0},{  1,11, 0},{ -1,11, 0},{  9, 1, 2},
				{ -9, 1, 2},{  5, 2, 2},{ -5, 2, 2},{  3, 4, 1},{ -3, 4, 1},
			},
     //level_add
			{ 0,10, 6, 4, 4, 3, 3, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			1, //golomb_order
			2, //inc_limit
			11 //max_run
		 },
		 {
			 { //level / run
				 {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
				 { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  5, 1, 1},
				 { -5, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  6, 1, 1},{ -6, 1, 1},{  1, 3, 0},
				 { -1, 3, 0},{  7, 1, 1},{ -7, 1, 1},{  3, 2, 0},{ -3, 2, 0},{  8, 1, 1},
				 { -8, 1, 1},{  1, 4, 0},{ -1, 4, 0},{  2, 3, 0},{ -2, 3, 0},{  9, 1, 1},
				 { -9, 1, 1},{  4, 2, 0},{ -4, 2, 0},{  1, 5, 0},{ -1, 5, 0},{ 10, 1, 1},
				 {-10, 1, 1},{  3, 3, 0},{ -3, 3, 0},{  5, 2, 1},{ -5, 2, 1},{  2, 4, 0},
				 { -2, 4, 0},{ 11, 1, 1},{-11, 1, 1},{  1, 6, 0},{ -1, 6, 0},{ 12, 1, 1},
				 {-12, 1, 1},{  1, 7, 0},{ -1, 7, 0},{  6, 2, 1},{ -6, 2, 1},{ 13, 1, 1},
				 {-13, 1, 1},{  2, 5, 0},{ -2, 5, 0},{  1, 8, 0},{ -1, 8, 0},
			 },
			 //level_add
			 { 0,14, 7, 4, 3, 3, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,
			 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			 1, //golomb_order
			 4, //inc_limit
			 8  //max_run
		},
		{
			{ //level / run
				{   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
				{ -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
				{ -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 0},{ -8, 1, 0},{  1, 2, 0},
				{ -1, 2, 0},{  9, 1, 0},{ -9, 1, 0},{ 10, 1, 0},{-10, 1, 0},{ 11, 1, 0},
				{-11, 1, 0},{  2, 2, 0},{ -2, 2, 0},{ 12, 1, 0},{-12, 1, 0},{ 13, 1, 0},
				{-13, 1, 0},{  3, 2, 0},{ -3, 2, 0},{ 14, 1, 0},{-14, 1, 0},{  1, 3, 0},
				{ -1, 3, 0},{ 15, 1, 0},{-15, 1, 0},{  4, 2, 0},{ -4, 2, 0},{ 16, 1, 0},
				{-16, 1, 0},{ 17, 1, 0},{-17, 1, 0},{  5, 2, 0},{ -5, 2, 0},{  1, 4, 0},
				{ -1, 4, 0},{  2, 3, 0},{ -2, 3, 0},{ 18, 1, 0},{-18, 1, 0},{  6, 2, 0},
				{ -6, 2, 0},{ 19, 1, 0},{-19, 1, 0},{  1, 5, 0},{ -1, 5, 0},
			},
			//level_add
			{ 0,20, 7, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			0, //golomb_order
			INT_MAX, //inc_limit
			5, //max_run
		}
};
#undef EOB

static const uint8_t partition_flags[30] = {
   0,                                 //I_8X8
   0,                                 //P_SKIP
   0,                                 //P_16X16
                       SPLITH,        //P_16X8
                              SPLITV, //P_8X16
                       SPLITH|SPLITV, //P_8X8
                       SPLITH|SPLITV, //B_SKIP
                       SPLITH|SPLITV, //B_DIRECT
   0,                                 //B_FWD_16X16
   0,                                 //B_BWD_16X16
   0,                                 //B_SYM_16X16
   FWD0|FWD1          |SPLITH,
   FWD0|FWD1                 |SPLITV,
   BWD0|BWD1          |SPLITH,
   BWD0|BWD1                 |SPLITV,
   FWD0|BWD1          |SPLITH,
   FWD0|BWD1                 |SPLITV,
   BWD0|FWD1          |SPLITH,
   BWD0|FWD1                 |SPLITV,
   FWD0|FWD1     |SYM1|SPLITH,
   FWD0|FWD1     |SYM1       |SPLITV,
   BWD0|FWD1     |SYM1|SPLITH,
   BWD0|FWD1     |SYM1       |SPLITV,
   FWD0|FWD1|SYM0     |SPLITH,
   FWD0|FWD1|SYM0            |SPLITV,
   FWD0|BWD1|SYM0     |SPLITH,
   FWD0|BWD1|SYM0            |SPLITV,
   FWD0|FWD1|SYM0|SYM1|SPLITH,
   FWD0|FWD1|SYM0|SYM1       |SPLITV,
                       SPLITH|SPLITV, //B_8X8 = 29
 };

static const int frame_rate_tab[][2] = {
    {    0,    0},
    {24000, 1001},
    {   24,    1},
    {   25,    1},
    {30000, 1001},
    {   30,    1},
    {   50,    1},
    {60000, 1001},
    {   60,    1},
 
    {   15,    1},
 
    {    5,    1},
    {   10,    1},
    {   12,    1},
    {   15,    1},
    {    0,    0},
};


static inline int xavs_clip(int a, int amin, int amax)
{
     if (a < amin)      return amin;
     else if (a > amax) return amax;
     else               return a;
}
static inline uint8_t xavs_clip_uint8(int a)
{
     if (a&(~255)) return (-a)>>31;
     else          return a;
}



static inline int clip3_int( int v, int i_min, int i_max )
{
    return ( (v < i_min) ? i_min : (v > i_max) ? i_max : v );
}

static inline float clip3_float( float v, float f_min, float f_max )
{
    return ( (v < f_min) ? f_min : (v > f_max) ? f_max : v );
}
static inline int median( int a, int b, int c )
{
    int min = a, max =a;
    if( b < min )
        min = b;
    else
        max = b;    

    if( c < min )
        min = c;
    else if( c > max )
        max = c;

    return a + b + c - min - max;
}


#define LOWPASS_4x4(ARRAY,INDEX)                                            \
    ( ARRAY[(INDEX)-1] + 2*ARRAY[(INDEX)] + ARRAY[(INDEX)+1] )
#define LOWPASS(ARRAY,INDEX)                                            \
    (( ARRAY[(INDEX)-1] + 2*ARRAY[(INDEX)] + ARRAY[(INDEX)+1] + 2) >> 2)

/****************************************************************************
 * * 4x4亮度块帧内预测
 ****************************************************************************/

/****************************************************************************
 * * xavs_intra_4x4_pred_vertical:帧内预测模式之垂直
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_vertical(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
	int y;
	uint64_t i_value = unaligned64(&p_top[1]);
	for(y=0;y<4;y++) 
	{
		*((uint64_t *)(p_dest+y*i_stride)) = i_value;
	}
}
/****************************************************************************
 * * xavs_intra_4x4_pred_horizontal:帧内预测模式之水平
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_horizontal(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
    int y;
    uint64_t i_value;
    for(y=0;y<4;y++) 
	{
		//0x0101010101010101ULL为什么编译不通过64位常量后面应该跟什么呢？
        i_value = p_left[y+1] * 0x0101010101010101;
        *((uint64_t *)(p_dest+y*i_stride)) = i_value;
    }
}
/****************************************************************************
 * * xavs_intra_4x4_pred_dc_128:帧内预测模式之直流,顶块和左块不能得到的情况下处理
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_dc_128(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{

	int y;
	uint64_t i_value = 128;
	for(y=0;y<4;y++)
		*((uint64_t *)(p_dest+y*i_stride)) = i_value;
}
/****************************************************************************
 * * xavs_intra_4x4_pred_dc_lp:帧内预测模式之直流,顶块和左块都能得到的情况下处理
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_dc_lp(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
    int x,y;
	for(y=0; y<4; y++)
		for(x=0; x<4; x++)
            p_dest[y*i_stride+x] = (LOWPASS_4x4(p_top,x+1)+LOWPASS_4x4(p_left,y+1)+4) >> 3;
}

/****************************************************************************
 * * xavs_intra_4x4_pred_dc_lp_left:帧内预测模式之直流,顶块不能得到的情况下处理
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_dc_lp_left(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
    int x,y;
    for(y=0; y<4; y++)
        for(x=0; x<4; x++)
            p_dest[y*i_stride+x] = LOWPASS(p_left,y+1);
}
/****************************************************************************
 * * xavs_intra_4x4_pred_dc_lp_top:帧内预测模式之直流,左块不能得到的情况下处理
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_dc_lp_top(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
    int x,y;
    for(y=0; y<4; y++)
        for(x=0; x<4; x++)
            p_dest[y*i_stride+x] = LOWPASS(p_top,x+1);
}
/****************************************************************************
 * * xavs_intra_4x4_pred_down_left:帧内预测模式之左下 均可用
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_down_left(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
    int x,y;
    for(y=0; y<4; y++)
        for(x=0; x<4; x++)
		{
			if (x==3&&y==3)
		       p_dest[y*i_stride+x]=(p_top[7]+p_top[8]+p_left[7]+p_left[8]+2)>>2;
			else
            p_dest[y*i_stride+x] = ((LOWPASS_4x4(p_top,x+y+2) + LOWPASS_4x4(p_left,x+y+2)) +4) >> 3;
		}
} 
/****************************************************************************
 * * xavs_intra_4x4_pred_down_left:帧内预测模式之右下
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_down_right(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
    int x,y;
    for(y=0; y<4; y++)
        for(x=0; x<4; x++)
            if(x==y)
                p_dest[y*i_stride+x] = (p_left[1]+2*p_top[0]+p_top[1]+2)>>2;
            else if(x>y)
                p_dest[y*i_stride+x] = LOWPASS(p_top,x-y);
            else
                p_dest[y*i_stride+x] = LOWPASS(p_left,y-x);
}
/****************************************************************************
 * * xavs_intra_4x4_pred_vertical_left:帧内预测模式之垂直左
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_vertical_left(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
	int x,y;
	for(y=0; y<4; y++)
		for(x=0; x<4; x++)
		{
				if(y==0||y==2)
					p_dest[y*i_stride+x] = (p_top[x+y/2+1]+p_top[x+y/2+2]+1)>>1;
				else 
					p_dest[y*i_stride+x] = LOWPASS(p_top,x+y/2+2);
		}
}
/****************************************************************************
 * * xavs_intra_4x4_pred_horizontal_down:帧内预测模式之水平下
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_horizontal_down(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
	int x,y;
	for(y=0; y<4; y++)
		for(x=0; x<4; x++)
		{
			hd=2*y-x;
			if(hd==0||hd==2||hd==4||hd==6)
				p_dest[y*i_stride+x] =(p_left[y-x/2]+p_left[y-x/2+1]+1)>>1;
			else if(hd==1||hd==3||hd==5)
				p_dest[y*i_stride+x] = LOWPASS(p_left,(y-x/2));
			else if(hd==-1)
				p_dest[y*i_stride+x] =(p_top[1]+2*p_top[0]+p_left[1]+2)>>2;
			else
				p_dest[y*i_stride+x]=LOWPASS(p_top,x-1);
		}
}
/****************************************************************************
 * * xavs_intra_4x4_pred_vertical_right:帧内预测模式之垂直右
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_vertical_right(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
	int x,y;
	for(y=0; y<4; y++)
		for(x=0; x<4; x++)
		{
			vr=2*x-y;
			if(vr==0||vr==2||vr==4)
				p_dest[y*i_stride+x] =(p_top[x-y/2]+p_top[x-y/2+1]+1)>>1;
			else if(vr==1||vr==3||vr==5)
				p_dest[y*i_stride+x] = LOWPASS(p_top,(x-y/2));
			else if(vr==-1)
				p_dest[y*i_stride+x] =LOWPASS(p_left,0);
			else
				p_dest[y*i_stride+x]=LOWPASS(p_left,y-1);
		}
}
/****************************************************************************
 * * xavs_intra_4x4_pred_horizontal_up:帧内预测模式之水平上
 ****************************************************************************/
static UNUSED void xavs_intra_4x4_pred_horizontal_up(uint8_t *p_dest,uint8_t *p_top,uint8_t *p_left,int i_stride)
{
	int x,y;
	for(y=0; y<4; y++)
		for(x=0; x<4; x++)
		{
			hu=x+2*y;
			if(hu==0||hu==2||hu==4)
				p_dest[y*i_stride+x] =(p_left[y+x/2+1]+p_left[y+x/2+2]+1)>>1;
			else if(hu==1||hu==3)
				p_dest[y*i_stride+x] = LOWPASS(p_left,(y+x/2+2));
			else if(hd==5)
				p_dest[y*i_stride+x] =(p_left[3]+3*p_left[4]+2)>>2;
			else
				p_dest[y*i_stride+x]=p_left[4];
		}
}

/****************************************************************************
 * * luma 8x8 intra
 ****************************************************************************/
/****************************************************************************
 * * xavs_intra_pred_dc_128:
 ****************************************************************************/
static UNUSED void xavs_intra_pred_dc_128(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top,uint8_t *p_left )
{

	int y;
	uint64_t i_value = 0x8080808080808080;
	for(y=0;y<8;y++)
		*((uint64_t *)(p_dest+y*i_stride)) = i_value;
}
/****************************************************************************
 * * xavs_intra_pred_dc_lp:
 ****************************************************************************/
static UNUSED void xavs_intra_pred_dc_lp(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y;
    for(y=0; y<8; y++)
        for(x=0; x<8; x++)
            p_dest[y*i_stride+x] = (LOWPASS(p_top,x+1) + LOWPASS(p_left,y+1)) >> 1;
}

/****************************************************************************
 * * xavs_intra_pred_dc_lp_left:
 ****************************************************************************/
static UNUSED void xavs_intra_pred_dc_lp_left(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y;
    for(y=0; y<8; y++)
        for(x=0; x<8; x++)
            p_dest[y*i_stride+x] = LOWPASS(p_left,y+1);
}
/****************************************************************************
 * * xavs_intra_pred_dc_lp_top:
 ****************************************************************************/
static UNUSED void xavs_intra_pred_dc_lp_top(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y;
    for(y=0; y<8; y++)
        for(x=0; x<8; x++)
            p_dest[y*i_stride+x] = LOWPASS(p_top,x+1);
}
/****************************************************************************
 * * xavs_intra_pred_horizontal:
 ****************************************************************************/
static UNUSED void xavs_intra_pred_horizontal(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int y;
    uint64_t i_value;
    for(y=0;y<8;y++) 
    {	
        i_value = p_left[y+1] * 0x0101010101010101ULL;
        *((uint64_t *)(p_dest+y*i_stride)) = i_value;
    }
}
/****************************************************************************
 * * xavs_intra_pred_vertical:
 ****************************************************************************/
static UNUSED void xavs_intra_pred_vertical(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top,uint8_t *p_left)
{
	int y;
	uint64_t i_value = unaligned64(&p_top[1]);
	for(y=0;y<8;y++) 
	{
		*((uint64_t *)(p_dest+y*i_stride)) = i_value;
	}
}
/****************************************************************************
 * * xavs_intra_pred_down_left:
 ****************************************************************************/
static UNUSED void xavs_intra_pred_down_left(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y;
    for(y=0; y<8; y++)
        for(x=0; x<8; x++)
            p_dest[y*i_stride+x] = (LOWPASS(p_top,x+y+2) + LOWPASS(p_left,x+y+2)) >> 1;
}
/****************************************************************************
 * * xavs_intra_pred_down_left:
 ****************************************************************************/
static UNUSED void xavs_intra_pred_down_right(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y;
    for(y=0; y<8; y++)
        for(x=0; x<8; x++)
            if(x==y)
                p_dest[y*i_stride+x] = (p_left[1]+2*p_top[0]+p_top[1]+2)>>2;
            else if(x>y)
                p_dest[y*i_stride+x] = LOWPASS(p_top,x-y);
            else
                p_dest[y*i_stride+x] = LOWPASS(p_left,y-x);
}

/****************************************************************************
 * * xavs_intra_pred_plane:
 ****************************************************************************/
static UNUSED void xavs_intra_pred_plane(uint8_t *p_dest, uint8_t edge[33], int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y,i_value;
    int i_h = 0;
    int i_v = 0;
    uint8_t *p_crop = crop_table + MAX_NEG_CROP;

    for(x=0; x<4; x++)
    {
        i_h += (x+1)*(p_top[5+x]-p_top[3-x]);
        i_v += (x+1)*(p_left[5+x]-p_left[3-x]);
    }
    i_value = (p_top[8]+p_left[8])<<4;
    i_h = (17*i_h+16)>>5;
    i_v = (17*i_v+16)>>5;
    for(y=0; y<8; y++)
    {
        for(x=0; x<8; x++)
        {
            p_dest[y*i_stride+x] = p_crop[(i_value+(x-3)*i_h+(y-3)*i_v+16)>>5];
        }
    }
}



/* intra chroma predict */
static UNUSED void xavs_intra_pred_chroma_dc_128(uint8_t *p_dest, int neighbor, int i_stride, uint8_t *p_top,uint8_t *p_left )
{

	int y;
	uint64_t i_value = 0x8080808080808080;
	for(y=0;y<8;y++)
		*((uint64_t *)(p_dest+y*i_stride)) = i_value;
}

static UNUSED void xavs_intra_pred_chroma_dc_lp(uint8_t *p_dest, int neighbor, int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y;
    for(y=0; y<8; y++)
        for(x=0; x<8; x++)
            p_dest[y*i_stride+x] = (LOWPASS(p_top,x+1) + LOWPASS(p_left,y+1)) >> 1;
}

static UNUSED void xavs_intra_pred_chroma_dc_lp_left(uint8_t *p_dest, int neighbor, int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y;
    for(y=0; y<8; y++)
        for(x=0; x<8; x++)
            p_dest[y*i_stride+x] = LOWPASS(p_left,y+1);
}

static UNUSED void xavs_intra_pred_chroma_dc_lp_top(uint8_t *p_dest, int neighbor, int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y;
    for(y=0; y<8; y++)
        for(x=0; x<8; x++)
            p_dest[y*i_stride+x] = LOWPASS(p_top,x+1);
}

static UNUSED void xavs_intra_pred_chroma_horizontal(uint8_t *p_dest, int neighbor, int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int y;
    uint64_t i_value;
    for(y=0;y<8;y++) 
    {	
        i_value = p_left[y+1] * 0x0101010101010101ULL;
        *((uint64_t *)(p_dest+y*i_stride)) = i_value;
    }
}

static UNUSED void xavs_intra_pred_chroma_vertical(uint8_t *p_dest, int neighbor, int i_stride, uint8_t *p_top,uint8_t *p_left)
{
	int y;
	uint64_t i_value = unaligned64(&p_top[1]);
	for(y=0;y<8;y++) 
	{
		*((uint64_t *)(p_dest+y*i_stride)) = i_value;
	}
}

static UNUSED void xavs_intra_pred_chroma_plane(uint8_t *p_dest, int neighbor, int i_stride, uint8_t *p_top,uint8_t *p_left)
{
    int x,y,i_value;
    int i_h = 0;
    int i_v = 0;
    uint8_t *p_crop = crop_table + MAX_NEG_CROP;

    for(x=0; x<4; x++)
    {
        i_h += (x+1)*(p_top[5+x]-p_top[3-x]);
        i_v += (x+1)*(p_left[5+x]-p_left[3-x]);
    }
    i_value = (p_top[8]+p_left[8])<<4;
    i_h = (17*i_h+16)>>5;
    i_v = (17*i_v+16)>>5;
    for(y=0; y<8; y++)
    {
        for(x=0; x<8; x++)
        {
            p_dest[y*i_stride+x] = p_crop[(i_value+(x-3)*i_h+(y-3)*i_v+16)>>5];
        }
    }
}

#undef LOWPASS




/****************************************************************************
 * 4x4 prediction for intra luma block
 ****************************************************************************/
#define F1(a,b)			(((a)+(b)+1)>>1)
#define F2(a,b,c)		(((a)+((b)<<1)+(c)+2)>>2)
#define F2_MID(a,b,c)	((a)+((b)<<1)+(c))
#define F4(a1,b1,c1,a2,b2,c2)	(((a1)+(c1)+(a2)+(c2)+((b1+b2)<<1)+4)>>3)

#define SRC(x,y) src[(x) + (y)*i_stride]
#define SRC_X4(x,y) MPIXEL_X4( &SRC(x,y) )
#define PREDICT_4x4_DC(v)\
	SRC_X4(0,0) = SRC_X4(0,1) = SRC_X4(0,2) = SRC_X4(0,3) = v;

#define EP (edge+8)

static UNUSED void
predict_4x4_dc_128(uint8_t * src, uint8_t edge[17], int i_stride)
{
	PREDICT_4x4_DC(0x80808080);
}

static UNUSED void
predict_4x4_dc_top(uint8_t *src, uint8_t edge[17], int i_stride)
{
	uint32_t top_edge[4];
	top_edge[0] = F2(EP[0],EP[1],EP[2]);
	top_edge[1] = F2(EP[1],EP[2],EP[3]);
	top_edge[2] = F2(EP[2],EP[3],EP[4]);
	top_edge[3] = F2(EP[3],EP[4],EP[5]);
	PREDICT_4x4_DC(MPIXEL_X4(&top_edge[0]));
}
static UNUSED void
predict_4x4_dc_left(uint8_t *src, uint8_t edge[17], int i_stride)
{
	SRC_X4(0, 0) = PIXEL_SPLAT_X4(F2(EP[0],EP[-1],EP[-2]));
	SRC_X4(0, 1) = PIXEL_SPLAT_X4(F2(EP[-1],EP[-2],EP[-3]));
	SRC_X4(0, 2) = PIXEL_SPLAT_X4(F2(EP[-2],EP[-3],EP[-4]));
	SRC_X4(0, 3) = PIXEL_SPLAT_X4(F2(EP[-3],EP[-4],EP[-5]));
}

static UNUSED void
predict_4x4_dc(uint8_t *src, uint8_t edge[17], int i_stride)
{
	int t0 = F2_MID(EP[0], EP[1], EP[2]);
	int t1 = F2_MID(EP[1], EP[2], EP[3]);
	int t2 = F2_MID(EP[2], EP[3], EP[4]);
	int t3 = F2_MID(EP[3], EP[4], EP[5]);
	int l0 = F2_MID(EP[0], EP[-1], EP[-2]);
	int l1 = F2_MID(EP[-1], EP[-2], EP[-3]);
	int l2 = F2_MID(EP[-2], EP[-3], EP[-4]);
	int l3 = F2_MID(EP[-3], EP[-4], EP[-5]);
	src[0] = (l0+t0+4)>>3;
	src[1] = (l0+t1+4)>>3;
	src[2] = (l0+t2+4)>>3;
	src[3] = (l0+t3+4)>>3;
	src += i_stride;
	src[0] = (l1+t0+4)>>3;
	src[1] = (l1+t1+4)>>3;
	src[2] = (l1+t2+4)>>3;
	src[3] = (l1+t3+4)>>3;
	src += i_stride;
	src[0] = (l2+t0+4)>>3;
	src[1] = (l2+t1+4)>>3;
	src[2] = (l2+t2+4)>>3;
	src[3] = (l2+t3+4)>>3;
	src += i_stride;
	src[0] = (l3+t0+4)>>3;
	src[1] = (l3+t1+4)>>3;
	src[2] = (l3+t2+4)>>3;
	src[3] = (l3+t3+4)>>3;
}

static UNUSED void predict_4x4_h( pixel *src, uint8_t edge[17], int i_stride)
{
	SRC_X4(0,0) = PIXEL_SPLAT_X4( EP[-1] );
	SRC_X4(0,1) = PIXEL_SPLAT_X4( EP[-2] );
	SRC_X4(0,2) = PIXEL_SPLAT_X4( EP[-3] );
	SRC_X4(0,3) = PIXEL_SPLAT_X4( EP[-4] );
}
static UNUSED void predict_4x4_v( pixel *src, uint8_t edge[17], int i_stride)
{
	PREDICT_4x4_DC(MPIXEL_X4(&EP[1]));
}

static UNUSED void predict_4x4_ddl( pixel *src, uint8_t edge[17], int i_stride)
{
	SRC(0,0)= F4(EP[1],EP[2],EP[3],EP[-1],EP[-2],EP[-3]);
	SRC(1,0)=SRC(0,1)= F4(EP[2],EP[3],EP[4],EP[-2],EP[-3],EP[-4]);
	SRC(2,0)=SRC(1,1)=SRC(0,2)= F4(EP[3],EP[4],EP[5],EP[-3],EP[-4],EP[-5]);
	SRC(3,0)=SRC(2,1)=SRC(1,2)=SRC(0,3)= F4(EP[4],EP[5],EP[6],EP[-4],EP[-5],EP[-6]);
	SRC(3,1)=SRC(2,2)=SRC(1,3)= F4(EP[5],EP[6],EP[7],EP[-5],EP[-6],EP[-7]);
	SRC(3,2)=SRC(2,3)= F4(EP[6],EP[7],EP[8],EP[-6],EP[-7],EP[-8]);
	SRC(3,3)= (EP[7]+EP[8]+EP[-7]+EP[-8]+2)>>2;
}
static UNUSED void predict_4x4_ddr( pixel *src, uint8_t edge[17], int i_stride)
{
	SRC(3,0)= F2(EP[4],EP[3],EP[2]);
	SRC(2,0)=SRC(3,1)= F2(EP[3],EP[2],EP[1]);
	SRC(1,0)=SRC(2,1)=SRC(3,2)= F2(EP[2],EP[1],EP[0]);
	SRC(0,0)=SRC(1,1)=SRC(2,2)=SRC(3,3)= F2(EP[1],EP[0],EP[-1]);
	SRC(0,1)=SRC(1,2)=SRC(2,3)= F2(EP[0],EP[-1],EP[-2]);
	SRC(0,2)=SRC(1,3)= F2(EP[-1],EP[-2],EP[-3]);
	SRC(0,3)= F2(EP[-2],EP[-3],EP[-4]);
}

static UNUSED void predict_4x4_vr( pixel *src, uint8_t edge[17], int i_stride )
{
	SRC(0,3)= F2(EP[-3],EP[-2],EP[-1]);
	SRC(0,2)= F2(EP[-2],EP[-1],EP[0]);
	SRC(0,1)=SRC(1,3)= F2(EP[-1],EP[0],EP[1]);
	SRC(0,0)=SRC(1,2)= F1(EP[0],EP[1]);
	SRC(1,1)=SRC(2,3)= F2(EP[0],EP[1],EP[2]);
	SRC(1,0)=SRC(2,2)= F1(EP[1],EP[2]);
	SRC(2,1)=SRC(3,3)= F2(EP[1],EP[2],EP[3]);
	SRC(2,0)=SRC(3,2)= F1(EP[2],EP[3]);
	SRC(3,1)= F2(EP[2],EP[3],EP[4]);
	SRC(3,0)= F1(EP[3],EP[4]);
}

static UNUSED void predict_4x4_hd( pixel *src, uint8_t edge[17], int i_stride)
{
	SRC(0,3)= F1(EP[-3],EP[-4]);
	SRC(1,3)= F2(EP[-2],EP[-3],EP[-4]);
	SRC(0,2)=SRC(2,3)= F1(EP[-2],EP[-3]);
	SRC(1,2)=SRC(3,3)= F2(EP[-1],EP[-2],EP[-3]);
	SRC(0,1)=SRC(2,2)= F1(EP[-1],EP[-2]);
	SRC(1,1)=SRC(3,2)= F2(EP[0],EP[-1],EP[-2]);
	SRC(0,0)=SRC(2,1)= F1(EP[0],EP[-1]);
	SRC(1,0)=SRC(3,1)= F2(EP[1],EP[0],EP[-1]);
	SRC(2,0)= F2(EP[2],EP[1],EP[0]);
	SRC(3,0)= F2(EP[3],EP[2],EP[1]);
}

static UNUSED void predict_4x4_vl( pixel *src, uint8_t edge[17], int i_stride)
{
	SRC(0,0)= F1(EP[1],EP[2]);
	SRC(0,1)= F2(EP[1],EP[2],EP[3]);
	SRC(1,0)=SRC(0,2)= F1(EP[2],EP[3]);
	SRC(1,1)=SRC(0,3)= F2(EP[2],EP[3],EP[4]);
	SRC(2,0)=SRC(1,2)= F1(EP[3],EP[4]);
	SRC(2,1)=SRC(1,3)= F2(EP[3],EP[4],EP[5]);
	SRC(3,0)=SRC(2,2)= F1(EP[4],EP[5]);
	SRC(3,1)=SRC(2,3)= F2(EP[4],EP[5],EP[6]);
	SRC(3,2)= F1(EP[5],EP[6]);
	SRC(3,3)= F2(EP[5],EP[6],EP[7]);
}

static UNUSED void predict_4x4_hu( pixel *src, uint8_t edge[17], int i_stride)
{
	SRC(0,0)= F1(EP[-1],EP[-2]);
	SRC(1,0)= F2(EP[-1],EP[-2],EP[-3]);
	SRC(2,0)=SRC(0,1)= F1(EP[-2],EP[-3]);
	SRC(3,0)=SRC(1,1)= F2(EP[-2],EP[-3],EP[-4]);
	SRC(2,1)=SRC(0,2)= F1(EP[-3],EP[-4]);
	SRC(3,1)=SRC(1,2)= F2(EP[-3],EP[-4],EP[-4]);
	SRC(3,2)=SRC(1,3)=SRC(0,3)=	
		SRC(2,2)=SRC(2,3)=SRC(3,3)= EP[-4];
}
#undef SRC
#undef EP

static UNUSED void inv_transform_B4(int curr_blk1[B4_SIZE][B4_SIZE])//xuyan1118 short->int
{
	short int xx,yy;
	short int tmp[B4_SIZE];
	short int t;
	short int curr_blk[B4_SIZE][B4_SIZE];

	int c = 3;

	for(yy=0; yy<B4_SIZE; yy++)
		for(xx=0; xx<B4_SIZE; xx++)
		{
			curr_blk[yy][xx] = (short int)curr_blk1[yy][xx];
		}
		
		for(yy=0; yy<B4_SIZE; yy++)
		{
			tmp[0] = (curr_blk[yy][0] + curr_blk[yy][2]) << 1; 
			tmp[1] = (curr_blk[yy][0] - curr_blk[yy][2]) << 1;    
			tmp[2] = curr_blk[yy][1] - (curr_blk[yy][3]*3);		
			tmp[3] = (curr_blk[yy][1]*3) + curr_blk[yy][3]; 

			for (xx=0; xx<2; xx++)
			{
				t=3-xx;
				curr_blk[yy][xx] = tmp[xx] + tmp[t];
				curr_blk[yy][t]= tmp[xx] - tmp[t];
			}
		}
		//vertical
		for(xx=0; xx<B4_SIZE; xx++)
		{
			tmp[0]= (curr_blk[0][xx] + curr_blk[2][xx]) << 1;
			tmp[1]= (curr_blk[0][xx] - curr_blk[2][xx]) << 1;
			tmp[2]= curr_blk[1][xx] - (curr_blk[3][xx]*c);		
			tmp[3]= (curr_blk[1][xx]*c) + curr_blk[3][xx];
			for( yy=0; yy<2; yy++)
			{
				t=3-yy;
				curr_blk[yy][xx] =(tmp[yy]+tmp[t]+16) >> 5;
				curr_blk[t][xx]=(tmp[yy]-tmp[t]+16) >> 5;
			}
		}

		for(xx=0;xx<B4_SIZE;xx++)
			for(yy=0;yy<B4_SIZE;yy++)
				curr_blk1[yy][xx] = curr_blk[yy][xx];
}


#define IDCT4_Horizontal_1D {\
	int a0 = (SRC(0) + SRC(2))<<1;\
	int a1 = (SRC(0) - SRC(2))<<1;\
	int a2 = SRC(1) - (SRC(3)*3);\
	int a3 = (SRC(1)*3) + SRC(3);\
	DST(0, a0+a3);\
	DST(3, a0-a3);\
	DST(1, a1+a2);\
	DST(2, a1-a2);\
}

#define IDCT4_Vertical_1D {\
	int a0 = (SRC(0) + SRC(2))<<1;\
	int a1 = (SRC(0) - SRC(2))<<1;\
	int a2 = SRC(1) - (SRC(3)*3);\
	int a3 = (SRC(1)*3) + SRC(3);\
	DST(0, (a0+a3+16)>>5);\
	DST(3, (a0-a3+16)>>5);\
	DST(1, (a1+a2+16)>>5);\
	DST(2, (a1-a2+16)>>5);\
}

static void add4x4_idct(uint8_t *dst, DCTELEM *dct/*[4][4]*/, int i_dst_stride)
{
	int i;
#define SRC(x)     dct[i*8 + x]
#define DST(x,rhs) dct[i*8 + x] = (rhs)
	for (i = 0; i < 4; i++)
		IDCT4_Horizontal_1D
#undef SRC
#undef DST
#define SRC(x)     dct[x*8 + i]
//#define DST(x,rhs) dst[i + x*8] = xavs_clip_uint8( dst[i + x*8] + (rhs) );
#define DST(x,rhs) dst[x*i_dst_stride + i] = xavs_clip_uint8( dst[x*i_dst_stride + i] + (rhs) );
		for (i = 0; i < 4; i++)
			IDCT4_Vertical_1D
#undef SRC
#undef DST
}

static UNUSED void xavs_idct4_add_c(uint8_t *dst, DCTELEM *block, int stride)
{
    int i;

    for( i = 0; i < 4; i++ )
    {
        //inv_transform_B4(curr_blk_4x4[i]);
        add4x4_idct(dst + (i>>1)*stride*4 + (i&1)*4, block + (i>>1)*8*4 + (i&1)*4, stride);
    }
    memset(block,0,64*sizeof(DCTELEM));
}

#define Clip3(min,max,val) (((val)<(min))?(min):(((val)>(max))?(max):(val)))

static UNUSED void xavs_idct8_add_c(uint8_t *dst, DCTELEM *block, int stride)
{
	int i;
	DCTELEM (*src)[8] = (DCTELEM(*)[8])block;
	uint8_t *cm = crop_table + MAX_NEG_CROP;//crop_table表示数组起始地址 第一个元素的地址 所以是第384个元素的地址

#if 1    
	int clip1, clip2; 
    
	clip1=0-(1<<(/*img->SourceBitDepth*/8+7));
    clip2=(1<<(/*img->SourceBitDepth*/8+7))-1;
#endif

	//src[0][0] += 8;
	for( i = 0; i < 8; i++ ) {
		const int a0 =  3*src[i][1] - (src[i][7]<<1);
		const int a1 =  3*src[i][3] + (src[i][5]<<1);
		const int a2 =  (src[i][3]<<1) - 3*src[i][5];
		const int a3 =  (src[i][1]<<1) + 3*src[i][7];

		const int b4 = ((a0 + a1 + a3)<<1) + a1;
		const int b5 = ((a0 - a1 + a2)<<1) + a0;
		const int b6 = ((a3 - a2 - a1)<<1) + a3;
		const int b7 = ((a0 - a2 - a3)<<1) - a2;

		const int a7 = (src[i][2]<<2) - 10*src[i][6];
		const int a6 = (src[i][6]<<2) + 10*src[i][2];
		const int a5 = ((src[i][0] - src[i][4]) << 3) /*+ 4*/;
		const int a4 = ((src[i][0] + src[i][4]) << 3)/* + 4*/;

		const int b0 = a4 + a6;
		const int b1 = a5 + a7;
		const int b2 = a5 - a7;
		const int b3 = a4 - a6;

#if 0
         src[i][0] = (b0 + b4) >> 3;
         src[i][1] = (b1 + b5) >> 3;
         src[i][2] = (b2 + b6) >> 3;
         src[i][3] = (b3 + b7) >> 3;
         src[i][4] = (b3 - b7) >> 3;
         src[i][5] = (b2 - b6) >> 3;
         src[i][6] = (b1 - b5) >> 3;
         src[i][7] = (b0 - b4) >> 3;
#else
         src[i][0]=((Clip3(clip1,clip2,((b0+b4)+(1<<2))))>>3); //dailiang 10bits
         src[i][1]=((Clip3(clip1,clip2,((b1+b5)+(1<<2))))>>3);
         src[i][2]=((Clip3(clip1,clip2,((b2+b6)+(1<<2))))>>3);
         src[i][3]=((Clip3(clip1,clip2,((b3+b7)+(1<<2))))>>3);
         src[i][7]=((Clip3(clip1,clip2,((b0-b4)+(1<<2))))>>3);
         src[i][6]=((Clip3(clip1,clip2,((b1-b5)+(1<<2))))>>3);
         src[i][5]=((Clip3(clip1,clip2,((b2-b6)+(1<<2))))>>3);
         src[i][4]=((Clip3(clip1,clip2,((b3-b7)+(1<<2))))>>3);
#endif

     }
	for( i = 0; i < 8; i++ ) {
		const int a0 =  3*src[1][i] - (src[7][i]<<1);
		const int a1 =  3*src[3][i] + (src[5][i]<<1);
		const int a2 =  (src[3][i]<<1) - 3*src[5][i];
		const int a3 =  (src[1][i]<<1) + 3*src[7][i];

		const int b4 = ((a0 + a1 + a3)<<1) + a1;
		const int b5 = ((a0 - a1 + a2)<<1) + a0;
		const int b6 = ((a3 - a2 - a1)<<1) + a3;
		const int b7 = ((a0 - a2 - a3)<<1) - a2;

		const int a7 = (src[2][i]<<2) - 10*src[6][i];
		const int a6 = (src[6][i]<<2) + 10*src[2][i];
		const int a5 = (src[0][i] - src[4][i]) << 3;
		const int a4 = (src[0][i] + src[4][i]) << 3;

		const int b0 = a4 + a6;
		const int b1 = a5 + a7;
		const int b2 = a5 - a7;
		const int b3 = a4 - a6;

#if 0
		dst[i + 0*stride] = cm[ dst[i + 0*stride] + ((b0 + b4) >> 7)];
		dst[i + 1*stride] = cm[ dst[i + 1*stride] + ((b1 + b5) >> 7)];
		dst[i + 2*stride] = cm[ dst[i + 2*stride] + ((b2 + b6) >> 7)];
		dst[i + 3*stride] = cm[ dst[i + 3*stride] + ((b3 + b7) >> 7)];
		dst[i + 4*stride] = cm[ dst[i + 4*stride] + ((b3 - b7) >> 7)];
		dst[i + 5*stride] = cm[ dst[i + 5*stride] + ((b2 - b6) >> 7)];
		dst[i + 6*stride] = cm[ dst[i + 6*stride] + ((b1 - b5) >> 7)];
		dst[i + 7*stride] = cm[ dst[i + 7*stride] + ((b0 - b4) >> 7)];
#else
		dst[i + 0*stride] = cm[ dst[i + 0*stride] + ((Clip3(clip1,clip2,(b0+b4)+64))>>7)];
		dst[i + 1*stride] = cm[ dst[i + 1*stride] + ((Clip3(clip1,clip2,(b1+b5)+64))>>7)];
		dst[i + 2*stride] = cm[ dst[i + 2*stride] + ((Clip3(clip1,clip2,(b2+b6)+64))>>7)];
		dst[i + 3*stride] = cm[ dst[i + 3*stride] + ((Clip3(clip1,clip2,(b3+b7)+64))>>7)];
		dst[i + 4*stride] = cm[ dst[i + 4*stride] + ((Clip3(clip1,clip2,(b3-b7)+64))>>7)];
		dst[i + 5*stride] = cm[ dst[i + 5*stride] + ((Clip3(clip1,clip2,(b2-b6)+64))>>7)];
		dst[i + 6*stride] = cm[ dst[i + 6*stride] + ((Clip3(clip1,clip2,(b1-b5)+64))>>7)];
		dst[i + 7*stride] = cm[ dst[i + 7*stride] + ((Clip3(clip1,clip2,(b0-b4)+64))>>7)];
#endif
	}
     memset(block,0,64*sizeof(DCTELEM));
}


#define P2 p0_p[-3*stride]
#define P1 p0_p[-2*stride]
#define P0 p0_p[-1*stride]
#define Q0 p0_p[ 0*stride]
#define Q1 p0_p[ 1*stride]
#define Q2 p0_p[ 2*stride]

static inline void loop_filter_l2(uint8_t *p0_p,int stride,int alpha, int beta) 
{
    int p0 = P0;
    int q0 = Q0;
    
    if(abs(p0-q0)<alpha && abs(P1-p0)<beta && abs(Q1-q0)<beta) 
    {
        int s = p0 + q0 + 2;

        alpha = (alpha>>2) + 2;
        if(abs(P2-p0) < beta && abs(p0-q0) < alpha) 
        {
            P0 = (P1 + p0 + s) >> 2;
            P1 = (2*P1 + s) >> 2;
        } 
        else
        {
            P0 = (2*P1 + s) >> 2;
        }
        if(abs(Q2-q0) < beta && abs(q0-p0) < alpha) 
        {
            Q0 = (Q1 + q0 + s) >> 2;
            Q1 = (2*Q1 + s) >> 2;
        }
        else
        {
            Q0 = (2*Q1 + s) >> 2;
        }
    }
}
 
static inline void loop_filter_l1(uint8_t *p0_p, int stride, int alpha, int beta, int tc) 
{
    int p0 = P0;
    int q0 = Q0;

    if(abs(p0-q0)<alpha && abs(P1-p0)<beta && abs(Q1-q0)<beta) 
    {
        int delta = xavs_clip(((q0-p0)*3+P1-Q1+4)>>3,-tc, tc);
        P0 = xavs_clip_uint8(p0+delta);
        Q0 = xavs_clip_uint8(q0-delta);
        
        if(abs(P2-p0)<beta) 
        {
            delta = xavs_clip(((P0-P1)*3+P2-Q0+4)>>3, -tc, tc);
            P1 = xavs_clip_uint8(P1+delta);
        }
        if(abs(Q2-q0)<beta) 
        {
            delta = xavs_clip(((Q1-Q0)*3+P0-Q2+4)>>3, -tc, tc);
            Q1 = xavs_clip_uint8(Q1-delta);
        }
    }
}
 
static inline void loop_filter_c2(uint8_t *p0_p,int stride,int alpha, int beta) 
{
    int p0 = P0;
    int q0 = Q0;

    if(abs(p0-q0)<alpha && abs(P1-p0)<beta && abs(Q1-q0)<beta) 
    {
        int s = p0 + q0 + 2;
        alpha = (alpha>>2) + 2;
        
        if(abs(P2-p0) < beta && abs(p0-q0) < alpha) 
        {
            P0 = (P1 + p0 + s) >> 2;
        }
        else
        {
            P0 = (2*P1 + s) >> 2;
        }
        
        if(abs(Q2-q0) < beta && abs(q0-p0) < alpha) 
        {
            Q0 = (Q1 + q0 + s) >> 2;
        }
        else
        {
            Q0 = (2*Q1 + s) >> 2;
        }
    }
}

static inline void loop_filter_c1(uint8_t *p0_p,int stride,int alpha, int beta,int tc) 
{
    if(abs(P0-Q0)<alpha && abs(P1-P0)<beta && abs(Q1-Q0)<beta) 
    {
        int delta = xavs_clip(((Q0-P0)*3+P1-Q1+4)>>3, -tc, tc);
        
        P0 = xavs_clip_uint8(P0+delta);
        Q0 = xavs_clip_uint8(Q0-delta);
    }
}

#undef P0
#undef P1
#undef P2
#undef Q0
#undef Q1
#undef Q2

void cavs_qpel16_put_mc10_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc20_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc30_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc01_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc11_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc21_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc31_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc02_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc12_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc22_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc32_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc03_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc13_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc23_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_put_mc33_c(uint8_t *dst, uint8_t *src, int stride);

void cavs_qpel8_put_mc10_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc20_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc30_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc01_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc11_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc21_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc31_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc02_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc12_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc22_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc32_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc03_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc13_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc23_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_put_mc33_c(uint8_t *dst, uint8_t *src, int stride);

void cavs_qpel8_put_mc00_c(uint8_t *dst, uint8_t *src, int stride);  
void cavs_qpel16_put_mc00_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc00_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc00_c(uint8_t *dst, uint8_t *src, int stride);

void cavs_qpel16_avg_mc10_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc20_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc30_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc01_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc11_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc21_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc31_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc02_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc12_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc22_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc32_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc03_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc13_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc23_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel16_avg_mc33_c(uint8_t *dst, uint8_t *src, int stride);

void cavs_qpel8_avg_mc10_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc20_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc30_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc01_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc11_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc21_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc31_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc02_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc12_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc22_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc32_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc03_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc13_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc23_c(uint8_t *dst, uint8_t *src, int stride);
void cavs_qpel8_avg_mc33_c(uint8_t *dst, uint8_t *src, int stride);

#endif 
